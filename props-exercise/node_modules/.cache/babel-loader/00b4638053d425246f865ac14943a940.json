{"ast":null,"code":"var _jsxFileName = \"/Users/ryanfreeman/Documents/Git/Learning-React/props-exercise/src/components/Instructions.js\";\nimport React from 'react';\n\nfunction Instructions(props) {\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"Instructions: \"), React.createElement(\"p\", {\n    className: \"instructions-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"In the index.js file, you will see three quotes on the state object. These quotes are passed down as props through several different components. Here are your tasks:\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), \"\\u2022 You must follow each quote (each peice of data) through the different component layers\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), \"\\u2022 In the PeopleList component, pass the correct quote to the correct character\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), \"\\u2022 For example, follow Yoda's quote down to PeopleList. It will be named a lot of different things along it's journey. In PeopleList, if you have followed the data, pass that quote to the Yoda component, and it will render in the app.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), \"\\u2022 The order of the quotes and the names of the props gets pretty mixed up through each component, so make sure you follow them carefully.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), \"RULE: Do NOT use the react tools, or console logs to see the value of any of these props. We want you to practice following the data through the several layers of components\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })));\n}\n\nexport default Instructions;","map":{"version":3,"sources":["/Users/ryanfreeman/Documents/Git/Learning-React/props-exercise/src/components/Instructions.js"],"names":["React","Instructions","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAG,IAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8KAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,mGAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,yFAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,oPAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,oJAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,mLA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BF,CAFF,CADF;AAkCD;;AAED,eAAeD,YAAf","sourcesContent":["import React from 'react';\n\nfunction Instructions(props) {\n  return (\n    <>\n      <h2>Instructions: </h2>\n      <p className=\"instructions-text\">\n        In the index.js file, you will see three quotes on the state object.\n        These quotes are passed down as props through several different\n        components. Here are your tasks:\n        <br />\n        <br />\n        • You must follow each quote (each peice of data) through the different\n        component layers\n        <br />\n        <br />\n        • In the PeopleList component, pass the correct quote to the correct\n        character\n        <br />\n        <br />\n        • For example, follow Yoda's quote down to PeopleList. It will be named\n        a lot of different things along it's journey. In PeopleList, if you have\n        followed the data, pass that quote to the Yoda component, and it will\n        render in the app.\n        <br />\n        <br />\n        • The order of the quotes and the names of the props gets pretty mixed\n        up through each component, so make sure you follow them carefully.\n        <br />\n        <br />\n        RULE: Do NOT use the react tools, or console logs to see the value of\n        any of these props. We want you to practice following the data through\n        the several layers of components\n        <br />\n      </p>\n    </>\n  );\n}\n\nexport default Instructions;\n"]},"metadata":{},"sourceType":"module"}